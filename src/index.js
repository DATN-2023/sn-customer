require('dotenv').config()
const { initDI } = require('./di')
const config = require('./config')
const firebaseAdmin = require('firebase-admin')
const logger = require('./logger')
const middleware = require('./middleware')
const server = require('./server')
const controller = require('./controller')
const { connect } = require('./database')
const { start } = require('./cache')
const repo = require('./repo')
const { createChannel, Publisher } = require('./queue')
const redisHelper = require('./redisHelper')
const models = require('./models')
const lang = require('./lang')
const EventEmitter = require('events').EventEmitter
const mediator = new EventEmitter()
logger.d('VTVFun User Service')
mediator.once('di.ready', async (container) => {
  console.log('di.ready, starting connect db ', config.dbSettings)
  container.registerValue('config', config)
  container.registerValue('i18n', lang('en'))
  container.registerValue('middleware', middleware)
  container.registerValue('logger', logger)
  container.registerValue('mediator', mediator)
  firebaseAdmin.initializeApp({
    credential: firebaseAdmin.credential.cert(config.firebaseConfig.serviceAccountPath),
  })
  console.log('connected firebase ', config.firebaseConfig)
  container.registerValue('firebaseAdmin', firebaseAdmin)
  const channel = await createChannel(config.rabbitConfig)
  const publisher = new Publisher(channel, config.workerConfig.exchange, config.workerConfig.exchangeType)
  container.registerValue('publisher', publisher)
  mediator.once('db.ready', db => {
    console.log('db.ready, starting connect cache ', config.redisConfig)
    start(container).then(redis => {
      logger.d('cache.ready, starting server')
      container.registerValue('db', db)
      container.registerValue('redis', redis)
      container.registerValue('redisHelper', redisHelper(container))
      container.registerValue('models', models(container))
      const repository = repo.connect(container)
      container.registerValue('repo', repository)
      container.registerValue('controller', controller(container))
      container.registerValue('middleware', middleware(container))
      server.start(container).then(app => {
        logger.d('Server started at port ', app.address().port)
      })
    }).catch(e => {
      logger.e(e)
    })
  })
  connect(container, mediator)
})
initDI(mediator)
